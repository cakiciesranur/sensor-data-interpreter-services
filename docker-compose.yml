version: '3.9'
networks:
  host:
    driver: bridge

services:
############# Sensor Data Consumer ##############
  sensor-data-consumer:
    container_name: sensor-data-consumer
    build:
      context: ./sensor-data-consumer
      dockerfile: Dockerfile
    image: sensor-data-consumer
    ports:
      - "8080:8080"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:29092,kafka-2:29093,kafka-3:29094"
      SPRING_KAFKA_CONSUMER_TOPIC: sensor-data
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: dev
      SPRING_APPLICATION_NAME: sensor-data-consumer
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_MONGODB_AUTO_INDEX_CREATION: true
      SPRING_DATA_MONGODB_HOST: mongo
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_USERNAME: consumerUser
      SPRING_DATA_MONGODB_PASSWORD: password
      SPRING_DATA_MONGODB_DATABASE: sensorDataDb
      FEIGN_CLIENT_DEVICE_SERVICE_URL: device-service:8084
    depends_on:
      - mongo
      - zookeeper-1
      - kafka-1
      - kafka-2
      - kafka-3
      - eureka
    networks:
      - host

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1
    user: root
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - host

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    user: root
    depends_on:
      - zookeeper-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - host

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    user: root
    depends_on:
      - zookeeper-1
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - host

  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3
    user: root
    depends_on:
      - zookeeper-1
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - host

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafka-ui
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-1:29092,kafka-2:29093,kafka-3:29094"
    depends_on:
      - zookeeper-1
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - host

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: rootUser
      MONGO_INITDB_ROOT_PASSWORD: rootPassword
      MONGO_INITDB_DATABASE: sensorDataDb
    volumes:
      - ./sensor-data-consumer/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - host

  mongo-express:
    image: mongo-express
    container_name: mongo-ui
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: rootUser
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootPassword
      ME_CONFIG_MONGODB_URL: mongodb://rootUser:rootPassword@mongo:27017/
    networks:
      - host

################## Device Service ###########
  db:
    image: mysql:latest
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=spring
      - MYSQL_DATABASE=device_db
    ports:
      - "3306:3306"
    restart: always
    volumes:
      - ./device-service/docker-entrypoint-initdb.d/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql:ro
    networks:
      - host

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: my-php-myadmin
    ports:
      - "8082:80"
    restart: always

    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: spring
    networks:
      - host

  device-service:
    image: device-service
    container_name: device-service
    build:
      context: ./device-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    restart: always

    depends_on:
      - db
      - eureka
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/device_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: spring
      SPRING_PROFILES_ACTIVE: dev
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_GENERATE_DDL: true
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - host

############### Eureka ############
  eureka:
    container_name: eureka
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    image: eureka-server
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      EUREKASERVER_PORT: "8761"
    networks:
      - host